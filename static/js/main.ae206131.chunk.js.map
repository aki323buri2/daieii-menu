{"version":3,"sources":["logo.svg","containers/MainBar.js","containers/Tables.js","containers/Sales.js","containers/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isExternal","url","test","useStyles","makeStyles","theme","root","display","grow","flexGrow","appBar","width","spacing","appBarShift","drawer","whiteSpace","drawerOpen","drawerClose","overflowX","toolbar","alignItems","justifyContent","padding","mixins","content","MainBar","title","children","repositoryUrl","menuList","map","icon","name","to","classes","useState","open","setOpen","toggleOpen","className","AppBar","clsx","Toolbar","IconButton","color","onClick","edge","Typography","variant","external","Tooltip","key","undefined","component","RouterLink","href","Drawer","paper","anchor","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","Tables","Sales","Main","path","createMuiTheme","palette","main","blue","AppLogo","placement","src","logo","alt","target","rel","App","element","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,2cCYrCC,EAAa,SAAAC,GAAG,MAAI,gBAAgBC,KAAKD,IAIzCE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,QAEXC,KAAM,CACJC,SAAU,GAEZC,OAAQ,CACNC,MAAM,eAAD,OAAiBN,EAAMO,QAAQ,GAAK,EAApC,QAEPC,YAAa,CACXF,MAAM,eAAD,OAbW,IAaX,QAEPG,OAAQ,CACNH,MAhBgB,IAiBhBI,WAAY,UAEdC,WAAY,CACVL,MApBgB,KAsBlBM,YAAa,CACXN,MAAON,EAAMO,QAAQ,GAAK,EAC1BM,UAAW,UAEbC,QAAQ,aACNZ,QAAS,OACTa,WAAY,SACZC,eAAgB,WAChBC,QAASjB,EAAMO,QAAQ,EAAG,IACvBP,EAAMkB,OAAOJ,SAElBK,QAAS,CACPf,SAAU,EACVa,QAASjB,EAAMO,QAAQ,QAoHZa,EAhHC,SAAC,GAWV,IAAD,UAVJC,aAUI,MAVI,+DAUJ,EATJC,EASI,EATJA,SASI,IARJC,qBAQI,MARY,iDAQZ,MAPJC,gBAOI,MAPO,CACT,CAAC,kBAAC,IAAD,MAAe,QAAS,wCACzB,CAAC,kBAAC,IAAD,MAAc,OAAQ,uBACvBC,KAAI,mCACJC,EADI,KACEC,EADF,WAEC,CACLD,OAAMC,OAAMN,MAHR,KAGeO,GAAID,MACrB,EACEE,EAAU/B,IADZ,EAEoBgC,oBAAS,GAF7B,mBAEGC,EAFH,KAESC,EAFT,KAGEC,EAAa,WACjBD,GAASD,IAEX,OACE,yBAAKG,UAAWL,EAAQ5B,MACtB,kBAACkC,EAAA,EAAD,CAAQD,UAAWE,aAAI,mBACpBP,EAAQxB,QAAU0B,GADE,cAEpBF,EAAQrB,YAAcuB,GAFF,KAIrB,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASP,EAAYQ,KAAK,SACpD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MACjBtB,GAEH,yBAAKa,UAAWL,EAAQ1B,OACvB,CACC,CAAC,kBAAC,IAAD,MAAe,SAAU,uCAAeoB,GACzC,CAAC,kBAAC,IAAD,MAAa,OAAQ,iCAAS,MAC/BE,KAAI,YAKC,IAAD,mBAJJC,EAII,KAHJC,EAGI,KAFJN,EAEI,KADJO,EACI,KACEgB,EAAWjD,EAAWiC,GAG5B,OACE,kBAACiB,EAAA,EAAD,CAASC,IAAKnB,EAAMN,MAAOA,GACzB,kBAACiB,EAAA,EAAD,CAAYC,MAAM,UAChBX,GAAKgB,OAAgBG,EAALnB,EAChBoB,UAAYJ,OAAwBG,EAAbE,IACvBC,KAAMN,EAAWhB,OAAKmB,GAErBrB,SAOb,kBAACyB,EAAA,EAAD,CACEjB,UAAWE,YAAKP,EAAQpB,QAAT,mBACZoB,EAAQlB,WAAaoB,GADT,cAEZF,EAAQjB,aAAemB,GAFX,IAIfF,QAAS,CACPuB,MAAOhB,YAAKP,EAAQpB,QAAT,mBACRoB,EAAQlB,WAAaoB,GADb,cAERF,EAAQjB,aAAemB,GAFf,KAKbY,QAAQ,YACRU,OAAO,QAEP,yBAAKnB,UAAWL,EAAQf,SACtB,kBAACwB,EAAA,EAAD,CAAYE,QAASP,GAClBF,EAAO,kBAAC,IAAD,MAAsB,kBAAC,IAAD,QAGlC,kBAACuB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG/B,EAASC,KAAI,YAKP,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAN,EAEI,EAFJA,MACAO,EACI,EADJA,GAEMgB,EAAWjD,EAAWiC,GAC5B,OACE,kBAACiB,EAAA,EAAD,CAASC,IAAKnB,EAAMN,MAAOA,GACzB,kBAACmC,EAAA,EAAD,CACEC,QAAM,EACN7B,GAAKgB,OAAgBG,EAALnB,EAChBsB,KAAMN,EAAWhB,OAAKmB,EACtBC,UAAYJ,OAAwBG,EAAbE,KAEvB,kBAACS,EAAA,EAAD,KACGhC,GAEH,kBAACiC,EAAA,EAAD,CAAcC,QAASvC,WAQnC,0BAAMa,UAAWL,EAAQV,SACvB,yBAAKe,UAAWL,EAAQf,UACvBQ,K,kCCrJMuC,EARA,WACb,OACE,wCCMWC,EARD,WACZ,OACE,uCCMEtC,EAAW,CACf,CAAC,kBAAC,IAAD,MAAgB,SAAU,6CAA3B,UAHW,SAGX,UAAuDqC,GACvD,CAAC,kBAAC,IAAD,MAAa,QAAS,2BAAvB,UAJW,SAIX,SAA+CC,IAC/CrC,KAAI,yCAEC,CACLC,KAHI,KAGEC,KAHF,KAGQN,MAHR,KAGeO,GAHf,KAGmBoB,UAHnB,SAoBSe,EAdF,WACX,OACE,6BACE,kBAAC,EAAD,CAASvC,SAAUA,GACjB,kBAAC,IAAD,KACGA,EAASC,KAAI,gBAAGG,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,UAAP,OACZ,kBAAC,IAAD,CAAOgB,KAAMpC,EAAIoB,UAAWA,W,0BCjBlChD,GAAQiE,YAAe,CAC3BC,QAAS,CAAEN,QAAS,CAAEO,KAAMC,KAAK,SAiBnC,IAAMC,GAAU,WACd,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACW,EAAA,EAAD,CAASxB,MAAM,+DAAaiD,UAAU,OACpC,kBAAC,IAAD,CAAM1C,GAAG,SACP,yBAAK2C,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,WAG7C,mCACO,4CADP,wBAGA,uBACEvC,UAAU,WACVgB,KAAK,sBACLwB,OAAO,SACPC,IAAI,uBAJN,kBAaOC,GAnCf,WACE,OANiBC,EAOf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACd,KAAK,IAAIhB,UAAWqB,KACjC,kBAAC,IAAD,CAAOL,KAAK,QAAQhB,UAAWe,MATrC,kBAAC,IAAD,CAAkB/D,MAAOA,IACtB6E,GAFc,IAAAA,GCCCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae206131.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles, Tooltip, Drawer, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Link as RouterLink } from 'react-router-dom'; \r\nimport clsx from 'clsx'; \r\n\r\nconst isExternal = url => /^https?\\:\\/\\//.test(url);\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex', \r\n  }, \r\n  grow: {\r\n    flexGrow: 1, \r\n  }, \r\n  appBar: {\r\n    width: `calc(100% - ${theme.spacing(7) + 1}px)`, \r\n  }, \r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`, \r\n  }, \r\n  drawer: {\r\n    width: drawerWidth, \r\n    whiteSpace: 'nowrap', \r\n  }, \r\n  drawerOpen: {\r\n    width: drawerWidth, \r\n  }, \r\n  drawerClose: {\r\n    width: theme.spacing(7) + 1, \r\n    overflowX: 'hidden', \r\n  }, \r\n  toolbar: {\r\n    display: 'flex', \r\n    alignItems: 'center', \r\n    justifyContent: 'flex-end', \r\n    padding: theme.spacing(0, 1), \r\n    ...theme.mixins.toolbar, \r\n  }, \r\n  content: {\r\n    flexGrow: 1, \r\n    padding: theme.spacing(3), \r\n  }, \r\n}));\r\n\r\nconst MainBar = ({\r\n  title = '株式会社ショクリュー', \r\n  children, \r\n  repositoryUrl = 'https://github.com/aki323buri2/daieii-menu.git', \r\n  menuList = [\r\n    [<InboxIcon />, 'inbox', 'インボックス', ], \r\n    [<MailIcon />, 'mail', 'メール'], \r\n  ].map(([\r\n    icon, name, title, \r\n  ]) => ({ \r\n    icon, name, title, to: name })), \r\n}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(true);\r\n  const toggleOpen = () => {\r\n    setOpen(!open);\r\n  }; \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar className={clsx({\r\n        [classes.appBar]: !open, \r\n        [classes.appBarShift]: open, \r\n      })}>\r\n        <Toolbar>\r\n          <IconButton color=\"inherit\" onClick={toggleOpen} edge=\"start\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow}/>\r\n          {[\r\n            [<GitHubIcon/>, 'github', 'GitHubリポジトリ', repositoryUrl], \r\n            [<HomeIcon/>, 'home', 'ロゴ画面へ', '/'], \r\n          ].map(([\r\n            icon, \r\n            name, \r\n            title, \r\n            to, \r\n          ]) => {\r\n            const external = isExternal(to);\r\n            \r\n\r\n            return (\r\n              <Tooltip key={name} title={title}>\r\n                <IconButton color=\"inherit\" \r\n                  to={!external ? to : undefined}\r\n                  component={!external ? RouterLink : undefined}\r\n                  href={external ? to : undefined }\r\n                  >\r\n                  {icon}\r\n                </IconButton>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open, \r\n          [classes.drawerClose]: !open, \r\n        })}\r\n        classes={{\r\n          paper: clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open, \r\n            [classes.drawerClose]: !open, \r\n          }), \r\n        }}\r\n        variant=\"permanent\"\r\n        anchor=\"left\" \r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={toggleOpen}>\r\n            {open ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {menuList.map(({\r\n            icon, \r\n            name, \r\n            title,\r\n            to,  \r\n          }) => {\r\n            const external = isExternal(to);\r\n            return (\r\n              <Tooltip key={name} title={title}>\r\n                <ListItem\r\n                  button \r\n                  to={!external ? to : undefined}\r\n                  href={external ? to : undefined}\r\n                  component={!external ? RouterLink : undefined}\r\n                >\r\n                  <ListItemIcon>\r\n                    {icon}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={title} />\r\n                </ListItem>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </List>\r\n      </Drawer>\r\n\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {children}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainBar;\r\n","import React from 'react'\r\n\r\nconst Tables = () => {\r\n  return (\r\n    <div>\r\n      tables\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tables\r\n","import React from 'react'\r\n\r\nconst Sales = () => {\r\n  return (\r\n    <div>\r\n      Sales\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sales\r\n","import React from 'react';\r\nimport MainBar from './MainBar'; \r\nimport { Switch, Route } from 'react-router-dom';\r\nimport GridOnIcon from '@material-ui/icons/GridOn';\r\nimport WebIcon from '@material-ui/icons/Web';\r\nimport Tables from './Tables'; \r\nimport Sales from './Sales'; \r\n\r\nconst root = '/main/'\r\n\r\nconst menuList = [\r\n  [<GridOnIcon />, 'tables', 'テーブル定義書', `${root}tables`, Tables], \r\n  [<WebIcon />, 'sales', '売上入力', `${root}sales`, Sales], \r\n].map(([\r\n  icon, name, title, to, component, \r\n]) => ({\r\n  icon, name, title, to, component, \r\n}));\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div>\r\n      <MainBar menuList={menuList}>\r\n        <Switch>\r\n          {menuList.map(({ to, component }) => (\r\n            <Route path={to} component={component} />\r\n          ))}\r\n        </Switch>\r\n      </MainBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport Main from './containers/Main'; \nimport { Tooltip, createMuiTheme, MuiThemeProvider } from '@material-ui/core'; \nimport { blue } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: { primary: { main: blue[800] } }, \n});\nconst applyTheme = element => (\n  <MuiThemeProvider theme={theme}>\n    {element}\n  </MuiThemeProvider>\n);\nfunction App() {\n  return applyTheme(\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={AppLogo} />\n        <Route path=\"/main\" component={Main} />\n      </Switch>\n    </Router>\n  );\n};\nconst AppLogo = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Tooltip title=\"クリックしてください\" placement=\"top\">\n          <Link to=\"/main\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </Tooltip>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}